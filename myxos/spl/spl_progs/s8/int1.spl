//interrupt1 is called for create and delete both have one argument
alias physicalSP S0;

//formula to calculate sp

physicalSP= ([PTBR+2*(SP/512)]*512)+(SP%512);

//register for systemcallnumber

alias sys_call_Number S1;

//we reduce by 1 because in memory address or values take one word

sys_call_Number=[physicalSP-1];

//getting the arguments, if there are n arguments we need n registers.
//since create and delete both have only one argument we take only one register

alias arg_fileName S2;
arg_fileName = [physicalSP-3]; 

alias temp_count S3;



if(sys_call_Number==1) then
	temp_count=FAT;
	//check if it's already there in the disk
	while (temp_count <FAT+512 && [temp_count]!=-1) do //check
		if([temp_count]==arg_fileName) then
			[physicalSP-2]=0;
			ireturn;
		endif;
		temp_count=temp_count+8;
	endwhile;
	//if no free entry is there return -1
	if(temp_count>= FAT+512) then
		[physicalSP-2]=-1;
		ireturn;
	endif;

	//checking free block in disk free list

	alias temp_df_count S4;

	temp_df_count=DISK_LIST+20; //0-20 is reserved for memory 448-511 for swap space

	alias scratchpadcount S5;

	while (temp_df_count<DISK_LIST+448) do
		if([temp_df_count]==0) then
			[temp_count]= arg_fileName;
			[temp_count+2]=temp_df_count-DISK_LIST;
			[temp_count+1]=0;
			load (1,[temp_count+1]);
			while(scratchpadcount< SCRATCHPAD+512) do
				[scratchpadcount]=-1;
				scratchpadcount=scratchpadcount+1;
			endwhile;
			store (1,[temp_count+1]);   //store basic block after updating words to -1
			[temp_df_count]=1;
			store (5,19);      //store fat, df back to memory
			store (6,20);
			[physicalSP-2]=0;
			ireturn;
		endif;
		temp_df_count=temp_df_count+1;
	endwhile;
    [physicalSP-2]=-1;
    ireturn;
 endif;