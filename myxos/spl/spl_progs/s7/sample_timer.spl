alias currentPCB S1;
alias currentPID S0;

currentPID=(PTBR-1024)/8;
currentPCB=READY_LIST+currentPID*32;
[currentPCB+1]=1;
[currentPCB+2]=BP;
[currentPCB+3]=SP-1;

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[currentPCB+4]=[physicalSP]; //ip is in top of stack;

[currentPCB+5]=PTBR;
[currentPCB+6]=PTLR;

[ currentPCB + 7 ] = R0;	
[ currentPCB + 8 ] = R1;	
[ currentPCB + 9 ] = R2;	
[ currentPCB + 10 ] = R3;
[ currentPCB + 11 ] = R4;		
[ currentPCB + 12 ] = R5;	
[ currentPCB + 13 ] = R6;	
[ currentPCB + 14 ] = R7;	

//print ("hello");

alias checkPCB S4;
alias newPCB S6;
alias max S5;
max = READY_LIST + 1024-32;

//[currentPCB +1] =1;

checkPCB = currentPCB+32;


while (checkPCB != currentPCB) do
	//print ("in while");
	if(checkPCB > max) then
		checkPCB = READY_LIST;
	endif;
	if ([checkPCB + 1] == 1) then 
		newPCB = checkPCB;
		break;
	else 
		checkPCB = checkPCB + 32;
	endif;
endwhile;

//print (PTBR);
if(checkPCB == currentPCB) then
	print ("in if"); 
	[currentPCB + 1] = 2;
	ireturn;
endif;


//print ("bye");

[newPCB + 1] = 2;
BP = [newPCB + 2];
SP = [newPCB + 3];
PTBR = [newPCB + 5];
PTLR = 4;
R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];
breakpoint;

SP = SP + 1; 
alias newphysicalSP S2; 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 

ireturn;
